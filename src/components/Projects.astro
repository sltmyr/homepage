---
const projects = [
  {
    title: "Smart Pricing for Retail",
    description:
      "A fully featured e-commerce platform built with React, Node.js, and MongoDB. Features include user authentication, product catalog, shopping cart, payment processing, and order management. The application uses Redux for state management and implements responsive design for mobile and desktop users.",
    image:
      "https://images.unsplash.com/photo-1557821552-17105176677c?q=80&w=800&auto=format&fit=crop",
    link: "https://github.com/",
    technologies: ["React", "Node.js", "MongoDB", "Redux"],
  },
  {
    title: "Stock Option Trading App",
    description:
      "A collaborative task management application that helps teams organize and track their projects. Built with Vue.js and Firebase, it includes features like real-time updates, task assignments, due dates, and project analytics. The app uses Vuex for state management and implements drag-and-drop functionality for an intuitive user experience.",
    image:
      "https://images.unsplash.com/photo-1540350394557-8d14678e7f91?q=80&w=800&auto=format&fit=crop",
    link: "https://github.com/",
    technologies: ["Vue.js", "Firebase", "Vuex", "SCSS"],
  },
  {
    title: "BMW's Cloud Native Data Lake",
    description:
      "A weather dashboard that provides current conditions and forecasts for locations worldwide. Built with TypeScript and the OpenWeather API, it features interactive maps, hourly and daily forecasts, and severe weather alerts. The application uses Chart.js for data visualization and implements geolocation for automatic local weather updates.",
    image:
      "https://images.unsplash.com/photo-1592210454359-9043f067919b?q=80&w=800&auto=format&fit=crop",
    link: "https://github.com/",
    technologies: ["TypeScript", "React", "Chart.js", "API Integration"],
  },
  {
    title: "Pyne Studio Online Shop",
    description:
      "A weather dashboard that provides current conditions and forecasts for locations worldwide. Built with TypeScript and the OpenWeather API, it features interactive maps, hourly and daily forecasts, and severe weather alerts. The application uses Chart.js for data visualization and implements geolocation for automatic local weather updates.",
    image:
      "https://images.unsplash.com/photo-1592210454359-9043f067919b?q=80&w=800&auto=format&fit=crop",
    link: "https://github.com/",
    technologies: ["TypeScript", "React", "Chart.js", "API Integration"],
  },
  {
    title: "Multichannel Solution for Retail",
    description:
      "A weather dashboard that provides current conditions and forecasts for locations worldwide. Built with TypeScript and the OpenWeather API, it features interactive maps, hourly and daily forecasts, and severe weather alerts. The application uses Chart.js for data visualization and implements geolocation for automatic local weather updates.",
    image:
      "https://images.unsplash.com/photo-1592210454359-9043f067919b?q=80&w=800&auto=format&fit=crop",
    link: "https://github.com/",
    technologies: ["TypeScript", "React", "Chart.js", "API Integration"],
  },
];
---

<section id="projects" class="py-20 overflow-hidden">
  <h2 class="mx-auto px-4 md:px-6 text-xl font-bold lg:mb-20 max-w-prose">
    These are a few of the projects I worked on in the 10 years I've been
    working as a professional software engineer.
  </h2>

  <div class="space-y-16 lg:space-y-32">
    {
      projects.map((project, index) => (
        <div
          class={`flex flex-col lg:!flex-row ${
            index % 2 === 0 ? "" : "lg:!flex-row-reverse"
          }`}
        >
          <div class="w-full lg:!w-1/2 flex flex-col justify-center gap-8 px-8 py-16">
            <h3 class="text-3xl lg:text-5xl font-bold text-center max-w-prose mx-auto">
              {project.title}
            </h3>
            <p class="text-lg max-w-prose mx-auto font-serif leading-relaxed">
              {project.description}
            </p>

            <div class="flex flex-wrap gap-3 justify-center max-w-prose mx-auto">
              {project.technologies.map((tech) => (
                <span class="px-4 py-2 bg-accent text-secondary text-sm font-medium rounded-full">
                  {tech}
                </span>
              ))}
            </div>

            <a
              href={project.link}
              target="_blank"
              rel="noopener noreferrer"
              class="mx-auto flex items-center justify-center gap-2 px-6 py-3 bg-primary text-secondary font-medium rounded-lg hover:bg-tertiary transition-colors"
            >
              <span>Visit</span>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="w-5 h-5"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" />
                <polyline points="15 3 21 3 21 9" />
                <line x1="10" y1="14" x2="21" y2="3" />
              </svg>
            </a>
          </div>

          <div
            class={`ipad-container w-5/6 lg:!w-1/2  transition-all duration-700 ease-out relative bg-gradient-to-br from-gray-100 to-white rounded-3xl p-8 shadow-2xl shadow-black/10 max-w-2xl  ${
              index % 2 === 0
                ? "slide-from-right translate-x-48 lg:rounded-r-none lg:-mr-8 lg:ml-auto"
                : "slide-from-left -translate-x-48 lg:rounded-l-none lg:-ml-8 lg:mr-auto"
            }`}
          >
            <div
              class={`absolute inset-0 rounded-3xl shadow-[inset_0_2px_4px_rgba(255,255,255,0.8),inset_0_-2px_4px_rgba(0,0,0,0.1)] ${
                index % 2 === 0 ? "lg:rounded-r-none" : "lg:rounded-l-none"
              }`}
            />

            <div class="bg-black rounded-2xl p-[3px] shadow-[inset_0_3px_12px_rgba(0,0,0,0.4)]">
              <div class="bg-white rounded-xl overflow-hidden aspect-[4/3] shadow-lg">
                <img
                  src={project.image}
                  alt={project.title}
                  class="w-full h-full object-cover transition-transform duration-300 hover:scale-105"
                />
              </div>
            </div>
          </div>
        </div>
      ))
    }
  </div>
</section>

<script>
  // Intersection Observer for scroll-triggered animations
  const observerOptions = {
    threshold: 0.2,
    rootMargin: "0px 0px -100px 0px",
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        const ipadContainer = entry.target as HTMLElement;
        const index = parseInt(ipadContainer.dataset.projectIndex || "0");

        setTimeout(() => {
          ipadContainer.classList.remove("-translate-x-48", "translate-x-48");
        }, index * 200);

        observer.unobserve(ipadContainer);
      }
    });
  }, observerOptions);

  document.addEventListener("DOMContentLoaded", () => {
    const ipadContainers = document.querySelectorAll(".ipad-container");
    ipadContainers.forEach((container) => {
      observer.observe(container);
    });
  });
</script>
